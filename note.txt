Module 2 - JAVASCRIPT
-----------------------------
JAVASCRIPT Version - ES6 ECMASCRIPT6
Features 
    - it can be used in both front end and backend
    - in front end - js provide behavior
    - in backend - js hepls in logical operations
    - Js support both procedural and object oriented programming(oops)
    - its a dinamically tight language - datatype changes during runtime.
    - single thread programming language, - Line by line execution.
    
Backend Procedural programming
--------------------------------

how to create a file.
---------------------------
    - filename.js
    - node - environment to run js outside the browser.

Display a content
------------------
console.log(content)

How to run
-----
node filename.js

to change directory: cd directoryname

Datatypes

Two types of datatype
1.Primitive Data types - cannot be changes 
                        - but can be reassigned.

                        x = 'hello'....canot be changed inside the same variable.
                        x='helo'
    -string - sequence of characters,single quotes or double quotes
    -number - 
    -boolean    - true or false
    -undefined - variable created but not assigned value.
    -null       - intentional absence of value. x = null.
    -bigint     -   lrger numbers eg:2^53
    -symbol     -  identify uniquely - eg : uses while creating js libraries - symbol()

2.Non primitive - combination of primitive data type - 
    -object - should be stored as key value pairs
    eg - object , array, functions.

variables
---------
used to store data
syntax
    variable - value
variable name is case sensitive.
rules to create variable name - identifiers.
---------------------------------------------
1.variable name should not start with digit.
2.subsequent characters can be alaphabeets ,digits,special characters.
3.if there is more than one word in variable name
        - camel case - eg carName.
        - words can be separated by underscores.
                eg:car_name...snake case

                extra(cases)
                -----
                camel case-carName.
                pascal case-CarName.
                snake case - car_name.
                kabab case- car-name.
                train case- Car-Name.
                upper snake case - CAR_NAME.
                flat case - carname.
                dot case - car.name
            js cases 
            ---------
            flat case
            camel case
            snake case.

keyword(important)
-----------
reserved words
it gives special meaning to the variables

    1.let - reassigning possible.
            redeclaration is not possible.
            hoisting not possible.
            block level scope.
                -only within curly braces.
    2.const - no reassigning is possible
                redeclaration is not possible.
                hoisting not possible
                global scope.not within loop because the value will changed in loop.
    3.var - reassigning is possible.
            redeaclaration is possible.
            hoisting possible.
            global scope.

Hoisting (interview)
--------------------
using a variable before it is declared.
only for var.
    result will be shown as undefined

concatenate.(imp)
----------------
(adding) appending one or more data types
number + number = number
string + number = string
string + string = string

template literal
-----------------
its a way of displaying content.

context $(variable)

Operators
------------
1.Assignment Operators
    represented by =
    eg:x=10.
2.Arithmatic operators
------------
addition +
subtraction -
multiolication  *
division /
modulous %
exponential **

3.Relational Operators
    >(greater than)
    >= (greater than or equal to) 
    < (less than) 
    =<(less than or equal to) 
    ==(double equal to)  
    ===(triple equal to)

    -relational operators return boolean value

4.Logical operators
--------------------
used in between relational operators
returns boolean values

AND (&&) 
T && T = T
T && F = F
F && T = F
F && F = F

OR (||)

T || T = T
T || F = T 
F || T = T
F || F = F

NOT (!)


5.increment(++) or decrement(--) operators
x++
x--

6.shorthand operator

+=   x =x+10;
-=   x= x-10

7.ternary operator
condition?truestatemnt:falsestatemnt;

8.truthy operator
    if there is only one statement or one if use truthy
    condition && statement (can be also used in react)

conditional statemnets or decesion make statemnets
to conditionally execute a statemnets
if else
    syntax
    -------
    if(condition){
        statements;
    }

switch case

Looping statement
---------------------
-to execute a statement repeatedly in a  rpogramme file
-Once control enters the loop - exit is only possible when condition is false.
1.while

syntax
--------
variable initialization
while(condition){ //number of times the loop should execute.
    statements
    exit condition // increment or decrement condition.
}

2.for

for(variable_initialization;condition;exit/incr/decre statement){
    statements.
}
cubes from 1 to 10:1 8 27 64 125 216 343 512 729 1000
squares from1 to 10:1 4 9 16 25 36 49 64 81 100
->Break statement - To exit forcefully from a loop.we use break statement

concepts
num/10 : add a decimal before the last digit
num%10 : will give last digit as remainder
num*10 : add zero to last once place

factorial : product of numbers ranging from 1 to given number

armstrong: 153 - 1**3 + 5**3 + 3**3

to access individula digits from given numbers
lastdig = num%10
num = Math.floor(num/10) -  to get remaining digit.

prime numbers- those natural numbers which have two factors that is 1 and the number itself.

natural umbers - 1,2,3...
whole numbers - 0,1,2,3
integers - -ve to positive  -2,-1,0,1,2,3

functions
-------------
-   to execute a set of code repeatedly at DIFFERENT LOCATION OF THE programming.
two part of functions
-   function definition
        place a set of code that need to be executed.
        syntax 
            function fname(arg1,arg2...,argnn){
                statement;
            }
-   function call
     -to execute the  code
        syntax
            fname() 

    functions are used to avoid Boiler plate(same set of codes repeating agin and again)

    actual values = arguments
    variables = parameters

    function fname(param1,parm2){

    }
    fname(arg1,arg2);
    --->variables created inside functions can only have functional scope.That means it cannot beused outside the function definition.
    if the variable need to accessed outside the function.you need to return that variable.

    ---->no staetements after return statement would not be executed.so it must be placed as the last statement inside the function definition.
    arrow function.
    ------------------------
    syntax
       const variablename = ()=>{} 
       variablename(arg1,arg2...argn)
        automatically return the value.without return statement.

Types of functions
----------------------
1.call back function
    ->function that are called by another function.
    ->child function is passed as an argument to the parent function.
2.Nested function
    --->function is called by the another function.
    (parent function calls the child function)
    --->child function is defined inside the parent function

    closure property?
    variables inside the parent function can be accessed inside the child function but vice versa is not possible.
    this scope is called lexical scope.

3.predefined functions - developers just need to call them to do certain task.
    example : log(),Math.floor(),String,Number(),parseInt() etc.

4.synchronous function:functions which doesnot have timedelay
5.Asynchronous function:function which have timedelay.
 example:api calls,setTimeout()

setTimeout is an asynchronous,callback,predefined function
extra notes of 3/07/2025.
6.Anonymous function


DataStructure
--------------
specialized format for organizing retrieving and storing data
 eg:array , stack ,list ,linked list,graph,hash,tree

array
---------
-unlike variables array can hold more than one data of different datatype that are separated by commas and enclosed within a square bracket
mutable datatype.
index - is used as a key to hold the value
        - starts with 0 0 - length-1
length - total number of items in an array
to access array elements - array[index]
                        -   normal for loop
                        - for in - displays index
                        - for of - returns item of the array
to add data to array
----------------
-push(item) - add items to the end of the array
-unshift(item) - add item to the start of the array
delete an from array
--------------------
-pop() - remove the last item from an array
-shift() - remove the first item from an array 
Binary search
---------------
 can only be applied on sorted array in ascending order
Algorithm
(1) start
(2) sort array in ascending order
(3) initialize variable
        low 
        up
(4)mid index - Math.floor(low+up/2)
(5) compare the value of mid index with serach items
    a}value in mid == searchitem
        print prsent
    b}value of mid < serachItem
        low = mid+1
    c}value of mid > searchitem
        up = mid-1
(6)repeat the step 4 & 5 until low>up
(7)end
array operators
    1.push  arr.push(item)
    2.pop  arr.pop()
    3.shift arr.shift(item)
    4.unshift arr.unshift(item,item)
    5.sort - to arrange array in ascending or deceneding order
        order -
        array - sort((a,b)=>a-b) = ascending
        array - sort((a,b)=>b-a) = descending
    6.flat() - to change the dimension of an array
        depth = infinity
        a.flat()- change array into one dimension lower
        array.flat(depth) - lower the array dimension into the specified depth
        array.flat(infinity) - lower the array dimension directly to one dimension.
    7.foreach()-used to access each element from given array and return data.
    8.map() - used to access each data from the given array and return new array having same number of elements in the parent array.
    9.filter() - used to access each elements from the givem array and return all the elements as array that satisfy a specific condition
    10.find() - access all elements and gives the first element which satisfies the condition
    11.reduce((accumilator,currentvalue))- it returns a single value fromthe given array.
                eq:largest number,smallest number,average,sum etc
    12.some() - it returns boolean values based on the condition.
    13.includes()-it returns boolean values based on items in given array.should pass item into he parenthesis
    14.splice(startindex,deletecount,items...) - to add or delete items from any part of the array.modifies the existing array
    15.indexOf()-to get the index of the particular item.
    16.lastIndexOf(item) - returns the last index of the item.
    17.slice(startindex,endindex) - used to create a subarray.ending index is excluded.returns new subarray.if ending index is not mentioned ,it will returns array till ending array.

Algorithm 
----------
step by step procedure.

flow chart 
------------
diagramatic representation of procedure.

shapes used
-----------
oval - start and end
paralellogram - inputs and outputs
rectangle - statements
diamonds - decision statement
arrow - flow of the steps.

binary search and linear search is important...More important is binary search.

Nested array
------------
array within another array

String
-------
sequence of characters stored in different memmory locations.
string is immutable.
you can reassign it.

String methods
--------------
1.startsWith() - to check whethre the string starts with a particular character or not - returns boolean values.it is case sensitive

note-[javascript can run in browser] == use inspect then console.type the program press enter

2.endsWith() - to check whethre the string ends with a particular character or not - returns boolean values.it is case sensitive.does it folows the sequence.

3.subString - to create a Sub string from a given string.ending index is excluded

4.toUpperCase()
5.toLowerCase()
6.trim()
7.slice(startindex,endindex) - create a Sub array. [diff between subString() and slice()]slice can have neg value.last value starts with -1
8.split(separator) - to divide the string based on the separator.it return a new array.
9.array.from() - returns an array having all leters in a given string.
10.replace() - to change a first matching content in a given string
11.replaceAll() - to change all matching content in a given string
reduceRight() - refer

Object
------------
- unlike array objects can store more than one data of different datatype with more clarity
syntax
---------
variable = {
    key:value,...
}
get item
1}objectname['key']
2}objectname.key //if we are using a specific key(user specified key) we can use this method

add item
----------
objectname['key']=value
object.assign(objectname,{key:value,...})

update
--------
reassign
1)objectname['key']=value

delete
-------
delete objectname.key

