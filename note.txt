Module 2 - JAVASCRIPT
-----------------------------
JAVASCRIPT Version - ES6 ECMASCRIPT6
Features 
    - it can be used in both front end and backend
    - in front end - js provide behavior
    - in backend - js hepls in logical operations
    - Js support both procedural and object oriented programming(oops)
    - its a dynamically tight language - datatype changes during runtime.
    - single thread programming language, - Line by line execution.
    
Backend Procedural programming
--------------------------------
-its a programming paradigm(style)-execution happens steb by step
                                    - functions and variables are considered as  separate entity (placed separately)

how to create a file.
---------------------------
    - filename.js
    - node - environment to run js outside the browser.

Display a content
------------------
console.log(content)

How to run
-----
node filename.js

to change directory: cd directoryname

Datatypes

Two types of datatype
1.Primitive Data types - cannot be changes - Primitive Data Types are the most basic building blocks of JavaScript data.
                        - but can be reassigned.

                        x = 'hello'....canot be changed inside the same variable.
                        x='helo'
    -string - sequence of characters,single quotes or double quotes
    -number - 
    -boolean    - true or false
    -undefined - variable created but not assigned value.
    -null       - intentional absence of value. x = null.
    -bigint     -   lrger numbers eg:2^53
    -symbol     -  identify uniquely - eg : uses while creating js libraries - symbol()

2.Non primitive - combination of primitive data type - 
    -object datatype - should be stored as key value pairs
    eg - {object , array, functions.}-under object datatype

variables
---------
used to store data
syntax
    variable - value
variable name is case sensitive.
rules to create variable name - identifiers.
---------------------------------------------
1.variable name should not start with digit.
2.subsequent characters can be alaphabeets ,digits,special characters.
3.if there is more than one word in variable name
        - camel case - eg carName.
        - words can be separated by underscores.
                eg:car_name...snake case

                extra(cases)
                -----
                camel case-carName.
                pascal case-CarName.
                snake case - car_name.
                kabab case- car-name.
                train case- Car-Name.
                upper snake case - CAR_NAME.
                flat case - carname.
                dot case - car.name
            js cases 
            ---------
            flat case
            camel case
            snake case.

keyword(important)
-----------
reserved words
it gives special meaning to the variables

    1.let - reassigning possible.
            redeclaration is not possible.
            hoisting not possible.
            block level scope.
                -only within curly braces.
    2.const - no reassigning is possible
                redeclaration is not possible.
                hoisting not possible
                global scope.not within loop because the value will changed in loop.
    3.var - reassigning is possible.
            redeaclaration is possible.
            hoisting possible.
            global scope.

Hoisting (interview)
--------------------
using a variable before it is declared.
only for var.
    result will be shown as undefined

concatenate.(imp)
----------------
(adding) appending one or more data types
number + number = number
string + number = string
string + string = string

template literal
-----------------
its a way of displaying content.

context $(variable)

Operators
------------
1.Assignment Operators
    represented by =
    eg:x=10.
2.Arithmatic operators
------------
addition +
subtraction -
multiplication  *
division /
modulous %
exponential **

3.Relational Operators
    >(greater than)
    >= (greater than or equal to) 
    < (less than) 
    =<(less than or equal to) 
    ==(double equal to)  
    ===(triple equal to)

    -relational operators return boolean value

4.Logical operators
--------------------
used in between relational operators
returns boolean values

AND (&&) 
T && T = T
T && F = F
F && T = F
F && F = F

OR (||)

T || T = T
T || F = T 
F || T = T
F || F = F

NOT (!)


5.increment(++) or decrement(--) operators
x++
x--

6.shorthand operator

+=   x =x+10;
-=   x= x-10

7.ternary operator
condition?truestatemnt:falsestatemnt;

8.truthy operator
    if there is only one statement or one if use truthy
    condition && statement (can be also used in react)

conditional statemnets or decesion make statemnets
to conditionally execute a statemnets
if else
    syntax
    -------
    if(condition){
        statements;
    }

switch case

Looping statement
---------------------
-to execute a statement repeatedly in a  rpogramme file
-Once control enters the loop - exit is only possible when condition is false.
1.while

syntax
--------
variable initialization
while(condition){ //number of times the loop should execute.
    statements
    exit condition // increment or decrement condition.
}

2.for

for(variable_initialization;condition;exit/incr/decre statement){
    statements.
}
cubes from 1 to 10:1 8 27 64 125 216 343 512 729 1000
squares from1 to 10:1 4 9 16 25 36 49 64 81 100
->Break statement - To exit forcefully from a loop.we use break statement

concepts
num/10 : add a decimal before the last digit
num%10 : will give last digit as remainder
num*10 : add zero to last once place

factorial : product of numbers ranging from 1 to given number

armstrong: 153 - 1**3 + 5**3 + 3**3

to access individula digits from given numbers
lastdig = num%10
num = Math.floor(num/10) -  to get remaining digit.

prime numbers- those natural numbers which have two factors that is 1 and the number itself.

natural umbers - 1,2,3...
whole numbers - 0,1,2,3
integers - -ve to positive  -2,-1,0,1,2,3
pattern printing - for machine tests
functions
-------------
-   to execute a set of code repeatedly at DIFFERENT LOCATION OF THE programming.
two part of functions
-   function definition
        place a set of code that need to be executed.
        syntax 
            function fname(arg1,arg2...,argnn){
                statement;
            }
-   function call
     -to execute the  code
        syntax
            fname() 

    functions are used to avoid Boiler plate(same set of codes repeating agin and again)

    actual values = arguments
    variables = parameters

    function fname(param1,parm2){

    }
    fname(arg1,arg2);
    --->variables created inside functions can only have functional scope.That means it cannot beused outside the function definition.
    if the variable need to accessed outside the function.you need to return that variable.

    ---->no staetements after return statement would not be executed.so it must be placed as the last statement inside the function definition.
    arrow function.
    ------------------------
    syntax
       const variablename = ()=>{} 
       variablename(arg1,arg2...argn)
        automatically return the value.without return statement.

Types of functions
----------------------
1.call back function
    ->function that are called by another function.
    ->child function is passed as an argument to the parent function.
2.Nested function
    --->function is called by the another function.
    (parent function calls the child function)
    --->child function is defined inside the parent function

    closure property?
    variables inside the parent function can be accessed inside the child function but vice versa is not possible.
    this scope is called lexical scope.

3.predefined functions - developers just need to call them to do certain task.
    example : log(),Math.floor(),String,Number(),parseInt() etc.

4.synchronous function:functions which doesnot have timedelay
5.Asynchronous function:function which have timedelay.
 example:api calls,setTimeout()

setTimeout is an asynchronous,callback,predefined function
extra notes of 3/07/2025.
6.Anonymous function

product based company - dsa,every sorts
DataStructure
--------------
specialized format for organizing retrieving and storing data
 eg:array , stack ,list ,linked list,graph,hash,tree

array
---------
-unlike variables array can hold more than one data of different datatype that are separated by commas and enclosed within a square bracket
mutable datatype.
mutable means it is changeable,array can be modified after it has been declared.
index - is used as a key to hold the value
        - starts with 0 0 - length-1
length - total number of items in an array
to access array elements - array[index]
                        -   normal for loop
                        - for in - displays index
                        - for of - returns item of the array
to add data to array
----------------
-push(item) - add items to the end of the array
-unshift(item) - add item to the start of the array
delete an from array
--------------------
-pop() - remove the last item from an array
-shift() - remove the first item from an array 
Binary search
---------------
 can only be applied on sorted array in ascending order
Algorithm
(1) start
(2) sort array in ascending order
(3) initialize variable
        low 
        up
(4)mid index - Math.floor(low+up/2)
(5) compare the value of mid index with serach items
    a}value in mid == searchitem
        print prsent
    b}value of mid < serachItem
        low = mid+1
    c}value of mid > searchitem
        up = mid-1
(6)repeat the step 4 & 5 until low>up
(7)end
array methods
    1.push  arr.push(item)
    2.pop  arr.pop()
    3.shift arr.shift(item)
    4.unshift arr.unshift(item,item)
    5.sort - to arrange array in ascending or deceneding order
        order -
        array - sort((a,b)=>a-b) = ascending
        array - sort((a,b)=>b-a) = descending
    6.flat() - to change the dimension of an array
        depth = infinity
        a.flat()- change array into one dimension lower
        array.flat(depth) - lower the array dimension into the specified depth
        array.flat(infinity) - lower the array dimension directly to one dimension.
    7.foreach()-used to access each element from given array and return data.
    8.map() - used to access each data from the given array and return new array having same number of elements in the parent array.
    9.filter() - used to access each elements from the givem array and return all the elements as array that satisfy a specific condition
    10.find() - access all elements and gives the first element which satisfies the condition
    11.reduce((accumilator,currentvalue))- it returns a single value fromthe given array.
                eq:largest number,smallest number,average,sum etc
    12.some() - it returns boolean values based on the condition.
    13.includes()-it returns boolean values based on items in given array.should pass item into he parenthesis
    14.splice(startindex,deletecount,items...) - to add or delete items from any part of the array.modifies the existing array
    15.indexOf()-to get the index of the particular item.
    16.lastIndexOf(item) - returns the last index of the item.
    17.slice(startindex,endindex) - used to create a subarray.ending index is excluded.returns new subarray.if ending index is not mentioned ,it will returns array till ending array.
    18.spread()-to merge to arrays,repreasented by ...
Algorithm 
----------
step by step procedure.

flow chart 
------------
diagramatic representation of procedure.

shapes used
-----------
oval - start and end
paralellogram - inputs and outputs
rectangle - statements
diamonds - decision statement
arrow - flow of the steps.

binary search and linear search is important...More important is binary search.

Nested array
------------
array within another array

String
-------
sequence of characters stored in different memmory locations.
string is immutable.
you can reassign it.

String methods
--------------
1.startsWith() - to check whethre the string starts with a particular character or not - returns boolean values.it is case sensitive

note-[javascript can run in browser] == use inspect then console.type the program press enter

2.endsWith() - to check whethre the string ends with a particular character or not - returns boolean values.it is case sensitive.does it folows the sequence.

3.subString - to create a Sub string from a given string.ending index is excluded

4.toUpperCase()
5.toLowerCase()
6.trim()
7.slice(startindex,endindex) - create a Sub array. [diff between subString() and slice()]slice can have neg value.last value starts with -1
8.split(separator) - to divide the string based on the separator.it return a new array.
9.array.from() - returns an array having all leters in a given string.
10.replace() - to change a first matching content in a given string
11.replaceAll() - to change all matching content in a given string
reduceRight() - refer

Object
------------
- unlike array objects can store more than one data of different datatype with more clarity
syntax
---------
variable = {
    key:value,...
}
get item
1}objectname['key']
2}objectname.key //if we are using a specific key(user specified key) we can use this method

add item
----------
objectname['key']=value
object.assign(objectname,{key:value,...})

update
--------
reassign
1)objectname['key']=value

delete
-------
delete objectname.key

OBJECT ORIENTED PROGRAMMING (oops)language
-----------------------------------------
- its a programming paradigm which consider real time entity into objects and class
- Basics
-----
1)class - Blue print which contains common features from which different objects are created.
2)object - it is the real time entity created from the class
3)reference - real memory location where the properties and methods are stired 
4)property - variable inside a class
5)method - function inside a class.

syntax
-------
class classname{
    //properties 
    //constructors
    //method
}
//it is not manadatory that all the above three exist in the class always.
instance for a class
---------------------
const objectname = new classname()

syntax to give constructors
----------------------------
constructor(){} - used to intialialize properties
constructor is invoked automatically when object is created.
syntax to create method
-------------------------
functionName(){

}
functionName()
this - instance variable - inorder to access properties and methods inside the class

pillars of oops
----------------
1)Inheritance
2)Polymorphism
3)Encapsulation - refer.
4)Abstraction - refer.

Inheritance
-------------
-to access properties and methods from one class to another.
-keyword used to inherit - extends
-syntax
---------
class B extends A {}
 A - parent class / super / base 
 B - Child Class / Derived / sub/

 Types of Inheritance(classical Inheritance)
 Single Inheritance
 Multilevel Inheritance
 Hierarichical Inheritance
 Multiple Inheritance - js doesnot supported
 Hybrid Inheritance - combination of the above inheritance
                        - doesnot support 

Polymorphism
-------------
poly - many 
morphism - forms
 1)Method overloading
 -methods with same name but different arguments
 execute based on the number of arguments
 -js doesnot support support method overloading.
 -achieved using rest operator-(...)
 2)Method Overriding.
 -method with same name and same number of arguments.
 -last written will execute
 -supported by js.

Exeception Handling
--------------------
Exeception - error 
error Handling

try catch block
syntax
-------
try{
    statemets which might commit error
}
catch{
    statement that need to be executed incase of error.
}
finally{
    execute in both case - optional
}
-----------------------------------------------------------------------------------------------------------------------------------------------
                    FRONTEND JAVASCRIPT
                    --------------------
- to provide behavior 
Browser - it is an application program that provides an interface with all the resources in the internet.(communication - user,resources)
Browser understanding language - html,css,js
DOM - DOCUMENT OBJECT MODEL - js accepts html elements with the help of DOM
- its a tree structure of html DOCUMENT
- created by browser
- js access DOM to get html elements
refer - BOM Browser Object Model:BOM is a way to interact with the browser using JavaScript. It includes objects like window, navigator, location, history, etc
Methods to access DOM
1)document.getElementByTagName() - returns htmlcollection.Not truly an array. doesnot support array methods
2)document.getElementByClassName() - returns htmlcollection.
3)document.getElementById() - returns the tag directly
4)document.querySelector()-h1,.class,#id - returns the first satisfying tag
5)document.querySelectorAll() - returns nodelist - collection of all satisfying tags

js
----
1)internal-placed inside the html file
    -script tag - placed after the body
2)external--create file with extension .js and place the connection in script tag
scripttag - srcpath 

to change the content
--------------------
- .innerHTML
    .innerHTML is a JavaScript property used to get or set the HTML content inside an element on a webpage.

                example: <p id="demo">Hello <b>World</b></p>

                let content = document.getElementById("demo").innerHTML;
                console.log(content); // Outputs: Hello <b>World</b>

                let content = document.getElementById("demo");
                console.log(content); // Outputs: <p id="demo">Hello <b>World</b></p>


-style
----
tag.style.propert = "value"
        examples:
                let heading = document.getElementById("demo");

                heading.style.color = "blue";              // Sets text color
                heading.style.backgroundColor = "yellow";  // Sets background color
                heading.style.fontSize = "24px";           // Sets font size
                heading.style.padding = "10px";            // Sets padding
                heading.style.border = "2px solid red";    // Sets border

- Events
 actions performed by the user that leads to a change in DOM.
 eg:click,submit,load,keydown,change etc...
 An event listener is a function/property that waits for a specific event to occur on an HTML element (like a button click, a key press, form submission, etc.) and then responds to it by executing some code.

 Browser Storage
 ----------------
DataBase : Used to store data - large amount data
Browser Storage - used to store data - limit amount data

Types
-------
1)local storage - permanent storage;Data persists even after the browser is closed or the computer is restarted.
2)session storage - temporary storage;Data is only available during the page session

- data must be stored as key value pairs
key and value must be string} ---->important
------------------------------

operations
----------
1}add 
    setItem(key,value)
2}read 
    getItem("key")
3}update
    setItem("key","value")
4}delete
    removeItem("key")
to convert a object to string JSON.stringify
to convert string to object JSON.parse.

window.location = 'filename' to move to another file


API - Application Programming Interface - Inorder to communicate between different resources available in the inetrnet. - (communication - application1,application2)
An API is a set of rules that allow different software applications to communicate with each other 
Types of API
------------
1public api
2.Partner api - one more user with authentication
3.Private api - for company pupose.more confidential data
4.Composite api - combination above two - maybe public-partner so on 

HTTP - Hyper Text Transfer Protocol - protocol to communicate throught internet.
----
Protocols - set of rules
-methods to transfer data.
->POST - to add data to the application.
->GET - to get data from application 
->PUT - to update existing data
->DELETE - to remove data

HTTPS - HyperTextTransferProtocol
FTP - File Transfer Protocol
SMTP - Simple Mail Transfer Protocol
TCP - Transmission Control Protocol
UDP - User Datagram Protocol

Parts of Request   request sending from a to b
----------------- a to b
body - data to share
header - secret-data  - token,content-type,api keys...

Response Series. b to a(Response from b to a)
----------------
100 - 199  1xx - information (check according to information)
200 - 299   2xx     - success response if b execute as per a's request
300 - 399   3xx        -redirection (check according to path)
400 - 499   4xx       - Error Response   its due to client error a's mistake
500 - 599   5xx        - Error Response its dues to serverside error b's mistake

JSON - Javascript Object Notation
---------------------------------
Format of sharing data between two different application.
If front end and back end have different language they must me be communicated for that purpose a common format JSON is created
syntax
------
("key":value)
-all data must be placed as key:value pairs
-each key:value pair must be separated by commas and enclosed in curly brackets.

Url -  Uniform resource locator - address of the resouces available in the internet.


RESTful API ARCHITECTURE
Refer the image of Restful API

explain through example in interview.

explanation from chatgpt
---------------------------
✅ What is a RESTful API?
RESTful API (Representational State Transfer) is an architectural style used to design networked applications (especially web services).
It allows different systems (like front-end and back-end, or different apps) to communicate with each other over the internet using HTTP methods (like GET, POST, PUT, DELETE) and data format like JSON.

📦 Key Components of a RESTful API (based on your info):
1. Client-Server Communication (Request & Response)
The client (A) sends a request to the server (B).

The server processes the request and sends back a response.

2. Parts of a Request (from A to B)
Part	Description
URL	Address of the resource (e.g., https://example.com/users)
Headers	Contains metadata like API keys, content type, token (used for security and proper formatting)
Body	Contains actual data (in POST/PUT) in JSON format

3. Response from B to A
Response Code	Type	Meaning
1xx	Informational	Request received, continue process
2xx	Success	Request processed successfully (e.g., 200 OK)
3xx	Redirection	Resource moved to a different URL
4xx	Client Error	Client (A) made a mistake (e.g., 404 Not Found, 401 Unauthorized)
5xx	Server Error	Server (B) failed to process (e.g., 500 Internal Server Error)

🔁 HTTP Methods in REST API
These are the main methods used to manipulate resources on the server:

Method	Purpose	Example
GET	Read data	GET /users to get user list
POST	Add new data	POST /users with user info
PUT	Update existing data	PUT /users/1 to update user with id 1
DELETE	Remove data	DELETE /users/1 to delete user with id 1

=>something went wrong.server side error.
Refer -  SOAP - SIMPLE OBJECT ACCESS ACCESS Protocol:SOAP is a protocol used to allow programs running on different operating systems to communicate with each other using HTTP and XML.
Testing Tool 
-----------
1.POSTMAN - REALTOOL
2.THUNDER CLIENT - vs code - extension 

create API
----------
1)Ajax - Asynchronous Javascript Xml
to set up api's
-based on xmlHttpRequest()-class-asynchronous function
open()- used to connect with the application
send() - request send 
readyState - it is a property inside xmlHttpRequest() class-  when requests sends its value automatically changes.
0 - no initialization 
1 - req send
2 - rq received
3 -req processed
4 - response
-onreadystateChange - eventListener - 
onreadystatechange is an event listener for the readystatechange event.
This event is triggered every time the readyState of the XMLHttpRequest object changes.
-status - holds the series number(property inside xmlHttpRequest()class)
-responseText - holds the response from the server(property inside xmlHttpRequest()class)
2)Fetch
Fetch() is used to create API 
 - based on Promise()
 A Promise is a JavaScript object from the Promise class that handles asynchronous operations.
   Promise represents the eventual result (success or failure) of an asynchronous operation.
   json returns a promise.
 -Promise also handles asynchronous functions
 -stages of Promise
    1)pending stage - if request is not accepted or rejected
    2)resolve stage- if request is resolved as per our request
            - response is accessed using  then() 
    3)reject stage - if request is not resolved 
         response is accessed using catch()

3)async-await
- these are two keywords.not a separte approach.
performs like a synchronous function
await keyword should only be given inside async function
to make synchronous we use async-await.
asyn-await can only be used when it returns promise.


✅ Start with a Clear Definition:
"In JavaScript, async/await is a modern syntax used to handle asynchronous operations more readably and synchronously. It's built on top of Promises and helps avoid chaining multiple .then() calls."

✅ Explain the Keywords:
async → Used before a function to make it return a Promise.

await → Pauses the execution inside the async function until the Promise resolves.

✅ Explain Why We Use It:
Clean and readable code

Avoids callback hell or deep .then() chaining

Easier error handling with try...catch

syntax
-------
function name(){
    const result = await api ()

}

How browser resolves Javascript functions?
v8 engines
-----------
refer - chrome v8 engine:def - helps to execute javascript in browser:
The V8 engine is an open-source JavaScript engine developed by Google. It is written in C++ and is primarily designed to execute JavaScript code. V8 is used in multiple applications, especially in Google Chrome, but later utilized to create Node.js for server-side coding.

Call stack
-----------
call stack - structure used in chrome vite engine
async and syn func does not store together in call stack.

How Does the Call Stack Work?
JavaScript operates in a single-threaded environment, meaning that it can only execute one operation at a time. The Call Stack is the part of JavaScript that keeps track of the execution process.
Function Call: When a function is called, the JavaScript engine pushes the function onto the Call Stack. The function remains in the stack until it completes its execution.
Executing the Function: The JavaScript engine processes the function in the stack. It runs the code inside the function until it reaches the end or encounters another function call.
Nested Function Calls: If a function calls another function, the new function is pushed onto the Call Stack. The engine continues to execute the newly pushed function while the previous one waits for completion.
Returning from a Function: Once a function finishes executing, it is removed (popped) from the stack. The JavaScript engine then continues executing the function that is now at the top of the stack.
Completion of Program: The process continues until all functions in the stack are executed and removed. Once the stack is empty, the JavaScript engine has completed the execution of the program.
therefore 
proririty queue - microtask queue
event loop - checking stack is empty or not




